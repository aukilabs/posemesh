name: Posemesh SDK
on: [push]

jobs:
  build_apple_sdk:
    name: Build Apple SDK
    runs-on: macos-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install PowerShell
        run: brew install --cask powershell

      - name: Install Rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Build Posemesh Networking (all platforms and architectures)
        run: pwsh ./networking/scripts/Build-Apple.ps1 Release -InstallNecessaryRustToolchainsAndTargets

      - name: Build OpenCV (all platforms and architectures)
        run: pwsh ./third-party/scripts/Build-OpenCV-Apple.ps1 Release

      - name: Build Posemesh SDK (all platforms and architectures)
        run: pwsh ./sdk/scripts/Build-Apple.ps1 Release

      - name: Bundle Posemesh SDK
        run: |
          pwsh ./sdk/scripts/Bundle-Framework.ps1 macOS Release
          pwsh ./sdk/scripts/Bundle-Framework.ps1 Mac-Catalyst Release
          pwsh ./sdk/scripts/Bundle-Framework.ps1 iOS-Simulator Release
          pwsh ./sdk/scripts/Bundle-XCFramework.ps1 Release
          cd ./sdk/out-Apple-Release
          zip -r -y ./Posemesh.zip ./Posemesh.xcframework

      - name: Get Posemesh SDK version
        run: |
          POSEMESH_SDK_VERSION=$(pwsh ./sdk/scripts/Get-Version.ps1)
          if [[ $? -ne 0 ]]; then echo '::error file=sdk/scripts/Get-Version.ps1::Get-Version.ps1 script failed.' 1>&2; exit 1; fi
          echo "POSEMESH_SDK_VERSION=$POSEMESH_SDK_VERSION" >> $GITHUB_ENV

      - name: Upload Posemesh SDK
        uses: actions/upload-artifact@v4
        with:
          name: Posemesh-Apple-SDK-v${{ env.POSEMESH_SDK_VERSION }}.${{ github.run_number }}
          path: ./sdk/out-Apple-Release/Posemesh.zip

  build_web_sdk:
    name: Build Web SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          git pull
          ./emsdk install 3.1.69
          ./emsdk activate 3.1.69

      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          source /etc/os-release
          wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Install Rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install WASM-Pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build Posemesh Networking
        run: pwsh ./networking/scripts/Build-Library.ps1 Web WASM32 Release -InstallNecessaryRustToolchainsAndTargets

      - name: Build OpenCV
        run: |
          source ./emsdk/emsdk_env.sh
          pwsh ./third-party/scripts/Build-OpenCV-Library.ps1 Web WASM32 Release

      - name: Build Posemesh SDK
        run: |
          source ./emsdk/emsdk_env.sh
          pwsh ./sdk/scripts/Build-Library.ps1 Web WASM32 Release

      - name: Get Posemesh SDK version
        run: |
          POSEMESH_SDK_VERSION=$(pwsh ./sdk/scripts/Get-Version.ps1)
          if [[ $? -ne 0 ]]; then echo '::error file=sdk/scripts/Get-Version.ps1::Get-Version.ps1 script failed.' 1>&2; exit 1; fi
          echo "POSEMESH_SDK_VERSION=$POSEMESH_SDK_VERSION" >> $GITHUB_ENV

      - name: Upload Posemesh SDK
        uses: actions/upload-artifact@v4
        with:
          name: Posemesh-Web-SDK-v${{ env.POSEMESH_SDK_VERSION }}.${{ github.run_number }}
          path: ./sdk/out-Web-WASM32-Release/*

  check_code_style:
    name: Check Code Style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          source /etc/os-release
          wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Check code style
        run: |
          pwsh ./sdk/scripts/Format-Code.ps1
          if [[ -n $(git status --porcelain) ]]; then echo '::error::Some of the source code files are not correctly formatted.' 1>&2; git status --porcelain | awk '{print "::error file=" $2 "::" $2 " source code file is not correctly formatted."}' 1>&2; exit 1; fi

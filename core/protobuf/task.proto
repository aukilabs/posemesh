syntax = "proto3";
import "domain_data.proto";
package task;

message Any {
  string type_url = 1; // in quick-protobuf, it is PATH, in prost, it is type_url https://github.com/tokio-rs/prost/issues/299
  bytes value = 2;
}

// Job containing a list of tasks
message Job {
    string name = 1;
    repeated TaskRequest tasks = 2;
}

enum Code {
    OK = 200;
    Created = 201;
    Accepted = 202;
    BadRequest = 400; 
}

message SubmitJobResponse {
    Code code = 1;
    string job_id = 2;
    string err_msg = 3;
}

// Task definition
message TaskRequest {
    string name = 1;
    CapabilityFilters capability_filters = 2;
    optional uint64 max_budget = 3;
    string timeout = 4;
    repeated string needs = 5; // List of dependent task names
    ResourceRecruitment resource_recruitment = 6;
    string sender = 7;
    optional string receiver = 8;
    Any data = 9;
}

// Filters for task capabilities
message CapabilityFilters {
    string endpoint = 1;
    optional int32 min_gpu = 2;
    optional int32 min_cpu = 3; // Optional, for tasks that need CPU
}

// Resource recruitment policies
message ResourceRecruitment {
    enum RecruitmentPolicy {
        ALWAYS = 0;         // "Always (recruit if not present or busy)"
        IF_NOT_PRESENT = 1; // "IfNotPresent (recruit if not present)"
        NEVER = 2;          // "Never (only re-use existing node, wait if busy)"
        FAIL = 3;           // "Fail (don't create job if there's no existing node)"
    }
    RecruitmentPolicy recruitment_policy = 1;

    enum TerminationPolicy {
        KEEP = 0;       // "Keep"
        TERMINATE = 1;  // "Terminate"
    }
    TerminationPolicy termination_policy = 2;
}

message ConsumeDataInputV1 {
  domain_data.Query query = 1;
  bool keep_alive = 2;
}

message StoreDataOutputV1 {
  repeated string ids = 1;
}

message LocalRefinementOutputV1 {
  repeated string result_ids = 1;
}

enum Status {
    PENDING = 0;
    STARTED = 1;
    DONE = 2;
    FAILED = 3;
    WAITING_FOR_RESOURCE = 4;
}

message Task {
  string name = 2;
  string receiver = 3;
  string endpoint = 4;
  string access_token = 5;
  string job_id = 6;
  string sender = 7;
  Status status = 9;
  Any output = 10;
}

message LocalRefinementInputV1 {
  domain_data.Query query = 1;
}

message DomainClusterHandshake {
  string access_token = 1;
}

message GlobalRefinementInputV1 {
    repeated LocalRefinementOutputV1 local_refinement_results = 1; 
}

message DomainDataChunk {
    bytes data = 1;
}

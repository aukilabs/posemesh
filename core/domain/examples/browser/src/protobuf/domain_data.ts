/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.1
 * source: domain_data.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace domain_data {
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name: string;
            data_type: string;
            size: number;
            id?: string;
            properties: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.name = data.name;
                this.data_type = data.data_type;
                this.size = data.size;
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                this.properties = data.properties;
            }
            if (!this.properties)
                this.properties = new Map();
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set data_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_data_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get size() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_size() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set properties(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            name?: string;
            data_type?: string;
            size?: number;
            id?: string;
            properties?: {
                [key: string]: string;
            };
        }): Metadata {
            const message = new Metadata({
                name: data.name,
                data_type: data.data_type,
                size: data.size,
                properties: new Map(Object.entries(data.properties))
            });
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                data_type?: string;
                size?: number;
                id?: string;
                properties?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.data_type != null) {
                data.data_type = this.data_type;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)(this.properties);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name && this.name.length)
                writer.writeString(1, this.name);
            if (this.has_data_type && this.data_type.length)
                writer.writeString(2, this.data_type);
            if (this.has_size)
                writer.writeUint32(3, this.size);
            if (this.has_id && this.id.length)
                writer.writeString(4, this.id);
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.data_type = reader.readString();
                        break;
                    case 3:
                        message.size = reader.readUint32();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
    export class Query extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids: string[];
            name_regexp?: string;
            data_type_regexp?: string;
            names: string[];
            data_types: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.ids = data.ids;
                if ("name_regexp" in data && data.name_regexp != undefined) {
                    this.name_regexp = data.name_regexp;
                }
                if ("data_type_regexp" in data && data.data_type_regexp != undefined) {
                    this.data_type_regexp = data.data_type_regexp;
                }
                this.names = data.names;
                this.data_types = data.data_types;
            }
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get name_regexp() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name_regexp(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name_regexp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get data_type_regexp() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data_type_regexp(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_data_type_regexp() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_types() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set data_types(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ids: string[];
            name_regexp?: string;
            data_type_regexp?: string;
            names: string[];
            data_types: string[];
        }): Query {
            const message = new Query({
                ids: data.ids,
                names: data.names,
                data_types: data.data_types
            });
            if (data.name_regexp != null) {
                message.name_regexp = data.name_regexp;
            }
            if (data.data_type_regexp != null) {
                message.data_type_regexp = data.data_type_regexp;
            }
            return message;
        }
        toObject() {
            const data: {
                ids: string[];
                name_regexp?: string;
                data_type_regexp?: string;
                names: string[];
                data_types: string[];
            } = {
                ids: this.ids,
                names: this.names,
                data_types: this.data_types
            };
            if (this.name_regexp != null) {
                data.name_regexp = this.name_regexp;
            }
            if (this.data_type_regexp != null) {
                data.data_type_regexp = this.data_type_regexp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writeRepeatedString(1, this.ids);
            if (this.has_name_regexp && this.name_regexp.length)
                writer.writeString(2, this.name_regexp);
            if (this.has_data_type_regexp && this.data_type_regexp.length)
                writer.writeString(3, this.data_type_regexp);
            if (this.names.length)
                writer.writeRepeatedString(4, this.names);
            if (this.data_types.length)
                writer.writeRepeatedString(5, this.data_types);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Query {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Query();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.name_regexp = reader.readString();
                        break;
                    case 3:
                        message.data_type_regexp = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Query {
            return Query.deserialize(bytes);
        }
    }
    export class Data extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            domain_id: string;
            metadata: Metadata;
            content: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.domain_id = data.domain_id;
                this.metadata = data.metadata;
                this.content = data.content;
            }
        }
        get domain_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set domain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_domain_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 2) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get content() {
            return pb_1.Message.getField(this, 3) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            domain_id?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            content?: Uint8Array;
        }): Data {
            const message = new Data({
                domain_id: data.domain_id,
                metadata: Metadata.fromObject(data.metadata),
                content: data.content
            });
            return message;
        }
        toObject() {
            const data: {
                domain_id?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                content?: Uint8Array;
            } = {};
            if (this.domain_id != null) {
                data.domain_id = this.domain_id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_domain_id && this.domain_id.length)
                writer.writeString(1, this.domain_id);
            if (this.has_metadata)
                writer.writeMessage(2, this.metadata, () => this.metadata.serialize(writer));
            if (this.has_content && this.content.length)
                writer.writeBytes(3, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Data();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.domain_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 3:
                        message.content = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Data {
            return Data.deserialize(bytes);
        }
    }
}

extern crate cbindgen;

use std::env;
use pb_rs::{types::FileDescriptor, ConfigBuilder};
use std::{path::{Path, PathBuf}, fs};

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    cbindgen::Builder::new()
      .with_crate(crate_dir.clone())
      .with_language(cbindgen::Language::C)
      .with_autogen_warning("/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */")
      .with_cpp_compat(true)
      .generate()
      .map_or_else(
        |error| match error {
            cbindgen::Error::ParseSyntaxError { .. } => {}
            e => panic!("{:?}", e),
        },
        |bindings| {
            bindings.write_to_file("../include/Posemesh/Domain/Domain.h");
        },
    );

    let out_dir = Path::new("./src").join("protobuf");

    let in_dir = PathBuf::from("../protobuf");
    // Re-run this build.rs if the protos dir changes (i.e. a new file is added)
    println!("cargo:rerun-if-changed={}", in_dir.to_str().unwrap());

    // Find all *.proto files in the `in_dir` and add them to the list of files
    let mut protos = Vec::new();
    let proto_ext = Some(Path::new("proto").as_os_str());
    fs::create_dir_all(&in_dir).expect("cant create input dir");
    let dir = fs::read_dir(in_dir.clone()).unwrap();
    
    for entry in dir {
        let path = entry.unwrap().path();
        if path.extension() == proto_ext {
            // Re-run this build.rs if any of the files in the protos dir change
            println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
            protos.push(path);
        }
    }

    // Delete all old generated files before re-generating new ones
    if out_dir.exists() {
        std::fs::remove_dir_all(&out_dir).unwrap();
    }
    std::fs::DirBuilder::new().create(&out_dir).unwrap();
    let config_builder = ConfigBuilder::new(&protos, None, Some(&out_dir), &[in_dir]).unwrap();
    FileDescriptor::run(&config_builder. dont_use_cow(true).build()).unwrap()
}

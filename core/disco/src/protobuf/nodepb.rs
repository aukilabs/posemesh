// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortalInDomain {
    #[prost(string, tag = "1")]
    pub portal_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub short_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub domain_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Connectivity check result for a single address.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectivityCheckResult {
    /// Node address in p2p multiaddr format.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// Whether the node is reachable using this address.
    #[prost(bool, tag = "2")]
    pub reachable: bool,
}
/// Request sent from a node to Discovery Service in order to register.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterNodeRequest {
    /// The node version.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub timestamp: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub public_key: ::prost::alloc::string::String,
    /// Capabilities in JSON object format.
    #[prost(string, tag = "5")]
    pub capabilities: ::prost::alloc::string::String,
    /// Addresses of the node, in p2p multiaddr format.
    #[prost(string, repeated, tag = "6")]
    pub addrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Response sent from Discovery Service to a node with registration result.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterNodeResponse {
    /// The node ID.
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// Organization ID of the node.
    #[prost(string, tag = "2")]
    pub organization_id: ::prost::alloc::string::String,
    /// IDs of domains which the node should is part of.
    #[prost(string, repeated, tag = "3")]
    pub domain_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Portals in domains.
    #[prost(message, repeated, tag = "4")]
    pub portals_in_domains: ::prost::alloc::vec::Vec<PortalInDomain>,
    /// IP under which the node is available.
    #[prost(string, tag = "5")]
    pub external_ip: ::prost::alloc::string::String,
    /// Results of the connectivity checks.
    #[prost(message, repeated, tag = "6")]
    pub results: ::prost::alloc::vec::Vec<ConnectivityCheckResult>,
}
/// Request sent from a node to Discovery Service to request a connectivity check.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectivityCheckRequest {
    /// Addresses of the node, in p2p multiaddr format.
    #[prost(string, repeated, tag = "1")]
    pub addrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Response sent from Discovery Service to a node with connectivity check results.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectivityCheckResponse {
    /// Whether the request was received/processed fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    /// IP under which the node is available.
    #[prost(string, tag = "3")]
    pub external_ip: ::prost::alloc::string::String,
    /// Results of the connectivity checks.
    #[prost(message, repeated, tag = "4")]
    pub results: ::prost::alloc::vec::Vec<ConnectivityCheckResult>,
}
/// Request sent from a node to Discovery Service to add the node to the domain.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInDomainUpdateRequest {
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
}
/// Response sent from Discovery Service to a node with NodeInDomainUpdate result.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInDomainUpdateResponse {
    /// Whether the request was received/processed fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}

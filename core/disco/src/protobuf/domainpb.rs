// This file is @generated by prost-build.
/// Request sent to notify domain manager that a domain was created on it.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDomainRequest {
    /// ID of the domain being created.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDomainResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteDomainRequest {
    /// ID of the domain being deleted.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteDomainResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearDomainPosesRequest {
    /// ID of the domain being cleared.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearDomainPosesResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovePortalsFromDomainRequest {
    /// ID of the domain from which portals are removed.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
    /// IDs of portals to remove from domain.
    #[prost(string, repeated, tag = "2")]
    pub portal_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovePortalsFromDomainResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
/// Request sent to old and new domain managers when manager is updated.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDomainManagerRequest {
    /// ID of the domain.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
    /// ID of the new domain manager node.
    #[prost(string, tag = "2")]
    pub new_manager_node_id: ::prost::alloc::string::String,
    /// ID of the old domain manager node.
    #[prost(string, tag = "3")]
    pub old_manager_node_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDomainManagerResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
/// Request sent to old and new domain managers when domain manager update is cancelled.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelUpdateDomainManagerRequest {
    /// ID of the domain.
    #[prost(string, tag = "1")]
    pub domain_id: ::prost::alloc::string::String,
    /// ID of the would-be new domain manager node if not cancelled.
    #[prost(string, tag = "2")]
    pub new_manager_node_id: ::prost::alloc::string::String,
    /// ID of the old domain manager node.
    #[prost(string, tag = "3")]
    pub old_manager_node_id: ::prost::alloc::string::String,
    /// Reason of the cancellation.
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelUpdateDomainManagerResponse {
    /// Whether the request was received fine.
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Error text.
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
